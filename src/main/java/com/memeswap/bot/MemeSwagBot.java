package com.memeswap.bot;

import com.memeswap.bot.database.DatabaseHandler;
import com.memeswap.bot.handlers.*;
import com.memeswap.bot.models.Meme;
import com.memeswap.bot.utils.KeyboardFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageCaption;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.Serializable;
import java.util.*;

public class MemeSwagBot extends TelegramLongPollingBot {
    private static final Logger logger = LoggerFactory.getLogger(MemeSwagBot.class);
    private final Map<Long, UserSession> userSessions = new HashMap<>();
    private final UserStateManager userStateManager = new UserStateManager();


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            handleMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleMessage(Message message) {
        long userId = message.getFrom().getId();
        long chatId = message.getChatId();
        UserSession session = userSessions.computeIfAbsent(chatId, k -> new UserSession());

        try {
            if (message.hasText()) {
                String text = message.getText();
                switch (text) {
                    case "/start":
                        sendWelcomeMessage(chatId);
                        break;

                    case "üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º":
                        userStateManager.setState(userId, UserStateManager.UserState.AWAITING_CAPTION);
                        sendMessage(chatId, "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ #–ù–∞–∑–≤–∞–Ω–∏–µ");
                        break;

                    case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                        sendUserProfile(chatId, userId);
                        break;

                    case "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
                        startFavoritesFeed(chatId, userId);
                        break;

                    case "üìú –õ–µ–Ω—Ç–∞ –º–µ–º–æ–≤":
                        startMemeFeed(chatId);
                        break;

                    case "üìÇ –ú–æ–∏ –º–µ–º—ã":
                        startUserMemeFeed(chatId, userId);
                        break;

                    case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                        showPreviousMeme(chatId);
                        break;

                    case "‚û°Ô∏è –í–ø–µ—Ä–µ–¥":
                        showNextMeme(chatId);
                        break;

                    case "‚ù§Ô∏è –õ–∞–π–∫":
                        handleLike(userId, session.getMemeIds().get(session.getCurrentMemeIndex()));
                        break;

                    case "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
                        handleReport(userId, session.getMemeIds().get(session.getCurrentMemeIndex()));
                        break;

                    case "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                        sendMainMenu(chatId);
                        break;

                    case "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è":
                        if (session.getCurrentFeedType() == UserSession.FeedType.AUTHOR) {
                            session.returnToPreviousFeed();
                            showCurrentMeme(chatId);
                        }
                        break;
                }
            } else if (message.hasPhoto()) {
                handleMemeUpload(message, chatId, userId);
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", e);
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
        }
    }

    private void handleLike(long userId, int memeId) {
        if (DatabaseHandler.hasUserLikedMeme(userId, memeId)) {
            sendPopupNotification(userId, "–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –º–µ–º—É");
        } else {
            DatabaseHandler.addLike(userId, memeId);
            sendPopupNotification(userId, "‚ù§Ô∏è –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω!");
        }
    }

    private void handleReport(long userId, int memeId) {
        if (DatabaseHandler.hasUserReportedMeme(userId, memeId)) {
            sendPopupNotification(userId, "–í—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –º–µ–º)");
        } else {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(userId));
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:");
            message.setReplyMarkup(createReportReasonsKeyboard(memeId));
            executeSilently(message);
        }
    }

    private void sendMainMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        message.setReplyMarkup(KeyboardFactory.getMainMenuKeyboard());
        executeSilently(message);
    }

    private void startUserMemeFeed(long chatId, long userId) {
        UserSession session = userSessions.get(chatId);
        session.savePreviousState();

        List<Integer> userMemeIds = DatabaseHandler.getMemesByUserId(userId);
        if (userMemeIds.isEmpty()) {
            sendMessage(chatId, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–º–æ–≤");
            session.restorePreviousState();
            return;
        }

        session.setCurrentFeedType(UserSession.FeedType.USER);
        session.setMemeIds(userMemeIds);
        session.setCurrentMemeIndex(0);

        showCurrentMeme(chatId);
    }

    private void handleMemeUpload(Message message, long chatId, long userId) {
        if (userStateManager.getState(userId) == UserStateManager.UserState.AWAITING_CAPTION) {
            String caption = message.getCaption();
            if (!ValidationUtils.isValidCaption(caption)) {

                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏! –ù–∞–∑–≤–∞–Ω–∏–µ –∫ –º–µ–º—É –Ω–µ –¥–æ–ª–∂–Ω–æ:\n" +
                        "\n1. –°–æ–¥–µ—Ä–∂–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤" +
                        "\n2. –°–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã: @, //" +
                        "\n3. –°–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏" +
                        "\n4. –î–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ #" +
                        "\n\n–ü—Ä–∏–º–µ—Ä: #FunnyMeme");

                return;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            DatabaseHandler.addUserIfNotExists(
                    userId,
                    message.getFrom().getUserName(),
                    message.getFrom().getFirstName()
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–º

            String fileId = message.getPhoto().get(0).getFileId();
            DatabaseHandler.saveMeme(userId, fileId, caption);

            sendMessage(chatId, "‚úÖ –ú–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
            userStateManager.clearState(userId);
        }
    }

    public class ValidationUtils {
        public static boolean isValidCaption(String caption) {
            return caption != null &&
                    caption.startsWith("#") &&
                    caption.length() <= 1000 &&
                    !caption.contains("@") &&
                    !caption.contains("//") &&
                    !caption.matches(".*http[s]?://.*");
        }
    }

    private void sendWelcomeMessage(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MemeSwap! üåü\n\n" +
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å, —Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –º–µ–º—ã/–Ω–æ–≤–æ—Å—Ç–∏\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ");
        message.setReplyMarkup(KeyboardFactory.getMainMenuKeyboard());
        executeSilently(message);
    }

    private void sendUserProfile(long chatId, long userId) {
        SendMessage profile = UserProfileHandler.handleProfileCommand(userId);
        profile.setChatId(String.valueOf(chatId));
        executeSilently(profile);
    }

    private void startMemeFeed(long chatId) {
        UserSession session = userSessions.get(chatId);
        session.savePreviousState();

        List<Integer> memeIds = DatabaseHandler.getAllMemeIdsWeighted(session.getUserId());
        if (memeIds.isEmpty()) {
            sendMessage(chatId, "üòî –ü–æ–∫–∞ –Ω–µ—Ç –º–µ–º–æ–≤");
            return;
        }

        session.setCurrentFeedType(UserSession.FeedType.MAIN);
        session.setMemeIds(memeIds);
        session.setCurrentMemeIndex(0);

        showCurrentMeme(chatId);
    }

    private void showNextMeme(long chatId) {
        UserSession session = userSessions.get(chatId);
        if (session.getMemeIds().isEmpty()) {
            sendMessage(chatId, "üòî –ü–æ–∫–∞ –Ω–µ—Ç –º–µ–º–æ–≤:/ –ë—É–¥—å –ø–µ—Ä–≤—ã–º!");
            return;
        }

        int nextIndex = session.getCurrentMemeIndex() + 1;
        if (nextIndex >= session.getMemeIds().size()) {
            if (session.getCurrentFeedType() != UserSession.FeedType.MAIN) {
                sendPopupNotification(chatId, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞");
                return;
            }
            nextIndex = 0;
        }

        Meme meme = DatabaseHandler.getMemeById(session.getMemeIds().get(nextIndex));
        if (meme == null) {
            session.setMemeIds(DatabaseHandler.getAllMemeIds());
            showNextMeme(chatId);
            return;
        }

        DatabaseHandler.addView(session.getUserId(), meme.getId());

        SendPhoto photo = new SendPhoto();
        photo.setChatId(String.valueOf(chatId));
        photo.setPhoto(new InputFile(meme.getFileId()));
        photo.setCaption(createMemeCaption(meme));
        photo.setReplyMarkup(createMemeKeyboard(meme.getId(), session));

        executeSilently(photo);
        session.setCurrentMemeIndex(nextIndex);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ª–µ–Ω—Ç—ã
        SendMessage menuMessage = new SendMessage();
        menuMessage.setChatId(String.valueOf(chatId));
        menuMessage.setText("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
        menuMessage.setReplyMarkup(KeyboardFactory.getMemeMenuKeyboard(session.getCurrentFeedType()));
        executeSilently(menuMessage);
    }

    private void showPreviousMeme(long chatId) {
        UserSession session = userSessions.get(chatId);
        if (session.getMemeIds().isEmpty()) {
            sendMessage(chatId, "üòî –ü–æ–∫–∞ –Ω–µ—Ç –º–µ–º–æ–≤:/ –ë—É–¥—å –ø–µ—Ä–≤—ã–º!");
            return;
        }

        int prevIndex = session.getCurrentMemeIndex() - 1;
        if (prevIndex < 0) {
            if (session.getCurrentFeedType() != UserSession.FeedType.MAIN) {
                sendPopupNotification(chatId, "–í—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞");
                return;
            }
            prevIndex = session.getMemeIds().size() - 1;
        }

        Meme meme = DatabaseHandler.getMemeById(session.getMemeIds().get(prevIndex));
        if (meme == null) {
            session.setMemeIds(DatabaseHandler.getAllMemeIds());
            showPreviousMeme(chatId);
            return;
        }

        DatabaseHandler.addView(session.getUserId(), meme.getId());

        SendPhoto photo = new SendPhoto();
        photo.setChatId(String.valueOf(chatId));
        photo.setPhoto(new InputFile(meme.getFileId()));
        photo.setCaption(createMemeCaption(meme));
        photo.setReplyMarkup(createMemeKeyboard(meme.getId(), session));

        executeSilently(photo);
        session.setCurrentMemeIndex(prevIndex);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ª–µ–Ω—Ç—ã
        SendMessage menuMessage = new SendMessage();
        menuMessage.setChatId(String.valueOf(chatId));
        menuMessage.setText("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
        menuMessage.setReplyMarkup(KeyboardFactory.getMemeMenuKeyboard(session.getCurrentFeedType()));
        executeSilently(menuMessage);
    }

    private InlineKeyboardMarkup createMemeKeyboard(int memeId, UserSession session) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è MAIN –∏ AUTHOR
        if (session.getCurrentFeedType() == UserSession.FeedType.MAIN
                || session.getCurrentFeedType() == UserSession.FeedType.AUTHOR) {

            boolean isFavorite = DatabaseHandler.isMemeInFavorites(session.getUserId(), memeId);
            String favoriteText = isFavorite ? "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
            String callbackData = isFavorite ? "remove_favorite_" : "add_favorite_";

            keyboard.add(Collections.singletonList(
                    createInlineButton(favoriteText, callbackData + memeId)
            ));
        }

        if (session.getCurrentFeedType() == UserSession.FeedType.FAVORITES) {
            keyboard.add(Collections.singletonList(
                    createInlineButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "remove_favorite_" + memeId)
            ));
        }

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç—ã)
        if (session.getCurrentFeedType() == UserSession.FeedType.MAIN) {
            keyboard.add(Collections.singletonList(
                    createInlineButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞", "author_profile_" + memeId) // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            ));
        }

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–π –ª–µ–Ω—Ç—ã)
        if (session.getCurrentFeedType() == UserSession.FeedType.USER) {
            keyboard.add(Collections.singletonList(
                    createInlineButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "delete_meme_" + memeId)
            ));
        }

        return new InlineKeyboardMarkup(keyboard);
    }

    private String createMemeCaption(Meme meme) {
        return String.format(
                "%s\n\nID: %d\n‚ù§Ô∏è –õ–∞–π–∫–æ–≤: %d\nüëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: %d",
                meme.getCaption(),
                meme.getId(),
                meme.getLikes(),
                DatabaseHandler.getMemeViews(meme.getId())
        );
    }

    private void showAuthorProfileWithActions(long chatId, long authorTelegramId) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
        com.memeswap.bot.models.User author = DatabaseHandler.getUserByTelegramId(authorTelegramId);
        if (author == null) {
            logger.error("–ê–≤—Ç–æ—Ä —Å Telegram ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", authorTelegramId);
            sendMessage(chatId, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –∞–≤—Ç–æ—Ä–∞
        Map<String, Integer> stats = DatabaseHandler.getAuthorStats(author.getId());

        String profileText = String.format(
                "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞:\n" +
                        "üìõ –ò–º—è: %s\n" +
                        "üìä –í—Å–µ–≥–æ –º–µ–º–æ–≤: %d\n" +
                        "‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: %d\n" +
                        "üëÄ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: %d",
                author.getName(),
                stats.getOrDefault("totalMemes", 0),
                stats.getOrDefault("totalLikes", 0),
                stats.getOrDefault("totalViews", 0)
        );

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(profileText);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–º–æ–≤ –∞–≤—Ç–æ—Ä–∞
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(Collections.singletonList(
                Collections.singletonList(
                        createInlineButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–º—ã –∞–≤—Ç–æ—Ä–∞",
                                "view_author_memes_" + authorTelegramId)
                )
        ));

        message.setReplyMarkup(markup);
        executeSilently(message);
    }

    private void startAuthorMemeFeed(long chatId, long authorTelegramId) {
        UserSession session = userSessions.get(chatId);
        session.savePreviousState();

        Integer authorId = DatabaseHandler.getUserIdByTelegramId(authorTelegramId);
        if (authorId == null) {
            sendMessage(chatId, "‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        List<Integer> authorMemeIds = DatabaseHandler.getUserMemeIds(authorId);
        if (authorMemeIds.isEmpty()) {
            sendMessage(chatId, "üòî –£ –∞–≤—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–º–æ–≤");
            session.restorePreviousState();
            return;
        }

        session.setCurrentFeedType(UserSession.FeedType.AUTHOR);
        session.setMemeIds(authorMemeIds);
        session.setCurrentMemeIndex(0);
        session.setAuthorId(authorId);

        showCurrentMeme(chatId);
    }

    private void handleReport(long userId, int memeId, String reason) {
        if (DatabaseHandler.hasUserReportedMeme(userId, memeId)) {
            sendPopupNotification(userId, "–í—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –º–µ–º");
        } else {
            DatabaseHandler.addReport(userId, memeId, reason);
            System.out.printf("[REPORT] UserID: %d | MemeID: %d | Reason: %s\n", userId, memeId, reason);
            sendPopupNotification(userId, "üö© –ñ–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!");
        }
    }

    private void showCurrentMeme(long chatId) {
        UserSession session = userSessions.get(chatId);
        if (session.getCurrentMemeIndex() < 0 ||
                session.getCurrentMemeIndex() >= session.getMemeIds().size()) return;

        int memeId = session.getMemeIds().get(session.getCurrentMemeIndex());
        Meme meme = DatabaseHandler.getMemeById(memeId);

        if (meme == null || !DatabaseHandler.memeExists(memeId)) {
            session.getMemeIds().remove(Integer.valueOf(memeId));
            showNextMeme(chatId);
            return;
        }

        if (session.getCurrentMemeIndex() >= 0 &&
                session.getCurrentMemeIndex() < session.getMemeIds().size()) {
            if (meme == null) {
                // –ï—Å–ª–∏ –º–µ–º —É–¥–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                session.getMemeIds().remove(Integer.valueOf(memeId));
                showNextMeme(chatId);
                return;
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            DatabaseHandler.addView(session.getUserId(), memeId);

            SendPhoto photo = new SendPhoto();
            photo.setChatId(String.valueOf(chatId));
            photo.setPhoto(new InputFile(meme.getFileId()));
            photo.setCaption(createMemeCaption(meme));
            photo.setReplyMarkup(createMemeKeyboard(memeId, session));

            executeSilently(photo);

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            SendMessage menu = new SendMessage();
            menu.setChatId(String.valueOf(chatId));
            menu.setText("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
            menu.setReplyMarkup(KeyboardFactory.getMemeMenuKeyboard(session.getCurrentFeedType()));
            executeSilently(menu);
        }
    }

    private void showCurrentAuthorMeme(long chatId) {
        UserSession session = userSessions.get(chatId);
        int memeId = session.getMemeIds().get(session.getCurrentMemeIndex());

        Meme meme = DatabaseHandler.getMemeById(memeId);
        SendPhoto photo = new SendPhoto();
        photo.setChatId(String.valueOf(chatId));
        photo.setPhoto(new InputFile(meme.getFileId()));
        photo.setCaption(createMemeCaption(meme));

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä—Å–∫–æ–π –ª–µ–Ω—Ç—ã
        photo.setReplyMarkup(createAuthorMemeKeyboard());
        executeSilently(photo);
    }

    private void startFavoritesFeed(long chatId, long userId) {
        UserSession session = userSessions.get(chatId);
        session.savePreviousState();

        List<Integer> favoriteMemeIds = DatabaseHandler.getFavoriteMemeIds(userId)
                .stream()
                .filter(memeId -> DatabaseHandler.getMemeById(memeId) != null) // –§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤
                .toList();

        if (favoriteMemeIds.isEmpty()) {
            sendMessage(chatId, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤");
            session.restorePreviousState();
            return;
        }

        session.setCurrentFeedType(UserSession.FeedType.FAVORITES);
        session.setMemeIds(new ArrayList<>(favoriteMemeIds)); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        session.setCurrentMemeIndex(0);

        showCurrentMeme(chatId);
    }

    private InlineKeyboardMarkup createAuthorMemeKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        List<InlineKeyboardButton> navRow = new ArrayList<>();
        navRow.add(createInlineButton("‚¨ÖÔ∏è", "author_prev"));
        navRow.add(createInlineButton("‚û°Ô∏è", "author_next"));
        keyboard.add(navRow);

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(Collections.singletonList(
                createInlineButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª–µ–Ω—Ç–µ", "return_to_feed")
        ));

        return new InlineKeyboardMarkup(keyboard);
    }

    private void handleAuthorNavigation(long chatId, String action) {
        UserSession session = userSessions.get(chatId);
        int currentIndex = session.getCurrentMemeIndex();

        switch (action) {
            case "author_prev":
                if (currentIndex > 0) {
                    session.setCurrentMemeIndex(currentIndex - 1);
                    showCurrentAuthorMeme(chatId);
                }
                break;
            case "author_next":
                if (currentIndex < session.getMemeIds().size() - 1) {
                    session.setCurrentMemeIndex(currentIndex + 1);
                    showCurrentAuthorMeme(chatId);
                }
                break;
        }
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();
        long userId = callbackQuery.getFrom().getId();
        UserSession session = userSessions.get(chatId);

        if (data == null || data.isEmpty()) {
            logger.warn("–ü—É—Å—Ç–æ–π callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            return;
        }

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤
            if (data.startsWith("like_")) {
                int memeId = Integer.parseInt(data.split("_")[1]);
                handleLike(userId, memeId);
            } else if (data.startsWith("delete_meme_")) {
                int memeId = Integer.parseInt(data.split("_")[2]);
                Integer internalUserId = DatabaseHandler.getUserIdByTelegramId(userId);

                if (internalUserId != null && DatabaseHandler.isMemeOwner(internalUserId, memeId)) {
                    DatabaseHandler.deleteMeme(memeId);
                    sendPopupNotification(chatId, "‚úÖ –ú–µ–º —É–¥–∞–ª–µ–Ω!");

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
                    session.getUserFeed().remove(Integer.valueOf(memeId));

                    if (session.getUserFeed().isEmpty()) {
                        sendMainMenu(chatId);
                    } else {
                        showNextMeme(chatId); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º
                    }
                } else {
                    sendPopupNotification(chatId, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                }
            } else if (data.startsWith("report_")) {
                String[] parts = data.split("_");
                if (parts.length >= 3) {
                    int memeId = Integer.parseInt(parts[1]);
                    String reason = String.join("_", Arrays.copyOfRange(parts, 2, parts.length));
                    handleReport(userId, memeId, reason);
                }

                // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∞
            } else if (data.startsWith("add_favorite_")) {
                int memeId = Integer.parseInt(data.split("_")[2]);

                if (!DatabaseHandler.memeExists(memeId)) {
                    sendPopupNotification(chatId, "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    return;
                }

                if (DatabaseHandler.isMemeInFavorites(userId, memeId)) {
                    sendPopupNotification(chatId, "‚≠ê –≠—Ç–æ—Ç –º–µ–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!");
                } else {
                    DatabaseHandler.addToFavorites(userId, memeId);
                    sendPopupNotification(chatId, "‚≠ê –ú–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!");
                    editMessageWithNewKeyboard(chatId, callbackQuery.getMessage().getMessageId(), memeId, session);
                }
            }  else if (data.startsWith("remove_favorite_")) {
                int memeId = Integer.parseInt(data.split("_")[2]);
                DatabaseHandler.removeFromFavorites(userId, memeId);
                sendPopupNotification(chatId, "‚ùå –ú–µ–º —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!");
                editMessageWithNewKeyboard(chatId, callbackQuery.getMessage().getMessageId(), memeId, session);
            }

            else if (data.startsWith("author_profile_")) {
                try {
                    int memeId = Integer.parseInt(data.substring("author_profile_".length()));
                    com.memeswap.bot.models.User author = DatabaseHandler.getAuthorByMemeId(memeId);

                    if (author != null) {
                        showAuthorProfileWithActions(chatId, author.getTelegramId());
                    } else {
                        logger.error("–ê–≤—Ç–æ—Ä –¥–ª—è –º–µ–º–∞ {} –Ω–µ –Ω–∞–π–¥–µ–Ω", memeId);
                        sendPopupNotification(chatId, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                    }
                } catch (NumberFormatException e) {
                    logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç memeId: {}", data);
                }

                // –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–º–æ–≤ –∞–≤—Ç–æ—Ä–∞
            } else if (data.startsWith("view_author_memes_")) {
                try {
                    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ authorTelegramId
                    long authorTelegramId = Long.parseLong(data.split("_")[3]);
                    Integer authorId = DatabaseHandler.getUserIdByTelegramId(authorTelegramId);

                    if (authorId != null) {
                        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id –∞–≤—Ç–æ—Ä–∞
                        startAuthorMemeFeed(chatId, authorTelegramId);
                    } else {
                        sendPopupNotification(chatId, "‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∞: {}", e.getMessage());
                }

                // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–º–∞–º –∞–≤—Ç–æ—Ä–∞
            } else if (data.startsWith("author_")) {
                String[] parts = data.split("_");
                if (parts.length == 2) {
                    handleAuthorNavigation(chatId, parts[1]);
                }

                // –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç–µ
            } else if (data.equals("return_to_feed")) {
                if (session != null) {
                    session.returnToPreviousFeed();
                    showCurrentMeme(chatId);
                }

                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            } else {
                logger.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {}", data);
                sendPopupNotification(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
            execute(new AnswerCallbackQuery(callbackQuery.getId()));

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {}", callbackQuery.getData(), e);
            sendPopupNotification(callbackQuery.getMessage().getChatId(), "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
        }
    }

    private void editMessageWithNewKeyboard(long chatId, int messageId, int memeId, UserSession session) {
        try {
            Meme meme = DatabaseHandler.getMemeById(memeId);
            if (meme == null) {
                logger.warn("–ú–µ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", memeId);
                return;
            }

            InlineKeyboardMarkup newKeyboard = createMemeKeyboard(memeId, session);

            EditMessageCaption edit = new EditMessageCaption();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setCaption(createMemeCaption(meme));
            edit.setReplyMarkup(newKeyboard);

            execute(edit);
            session.setCurrentKeyboard(newKeyboard);
            logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –º–µ–º–∞ {}", memeId);
        } catch (TelegramApiException e) {
            if (!e.getMessage().contains("message is not modified")) {
                logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ", e);
            }
        }
    }

    private void sendPopupNotification(long chatId, String text) {
        try {
            execute(new SendMessage(String.valueOf(chatId), text));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage(String.valueOf(chatId), text);
        executeSilently(message);
    }

    private <T extends Serializable> void executeSilently(BotApiMethod<T> method) {
        try {
            execute(method);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardMarkup createReportReasonsKeyboard(int memeId) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö
        keyboard.add(Collections.singletonList(
                createInlineButton("üö© –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", "report_" + memeId + "_1")
        ));
        keyboard.add(Collections.singletonList(
                createInlineButton("üö© –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞", "report_" + memeId + "_2")
        ));
        keyboard.add(Collections.singletonList(
                createInlineButton("üö© –°–ø–∞–º", "report_" + memeId + "_3")
        ));
        keyboard.add(Collections.singletonList(
                createInlineButton("üö© –î—Ä—É–≥–æ–µ", "report_" + memeId + "_4")
        ));

        return new InlineKeyboardMarkup(keyboard);
    }

    private void executeSilently(SendPhoto photo) {
        try {
            execute(photo);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void clearAllSessionsCache() {
        userSessions.values().forEach(UserSession::clearCache);
    }

    // –°–∏–Ω–≥–ª—Ç–æ–Ω-–ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç–∞–Ω—Å—É
    private static MemeSwagBot instance;
    public static MemeSwagBot getInstance() {
        return instance;
    }

    @Override
    public void onRegister() {
        instance = this;
    }

    @Override
    public String getBotUsername() {
        return "MemeSwagBot";
    }

    @Override
    public String getBotToken() {
        return "7937990194:AAHedzejkuIflo9yfP8G7l7KBcOVDqJkzIw"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    }
}